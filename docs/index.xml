<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reaper: Easy Repair Management for Apache Cassandra</title>
    <link>http://cassandra-reaper.io/</link>
    <description>Recent content on Reaper: Easy Repair Management for Apache Cassandra</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://cassandra-reaper.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/api/</guid>
      <description>Rest API Source code for all the REST resources can be found from package io.cassandrareaper.resources.
Ping Resource  GET /ping  Expected query parameters: None Simple ping resource that can be used to check whether the reaper is running.   Cluster Resource  GET /cluster
 Expected query parameters:  seedHost: Limit the returned cluster list based on the given seed host. (Optional)  Returns a list of registered cluster names in the service.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/backends/cassandra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/backends/cassandra/</guid>
      <description>Cassandra Backend To use Apache Cassandra as the persistent storage for Reaper, the storageType setting must be set to cassandra in the Reaper configuration YAML file. In addition, the connection details for the Apache Cassandra cluster being used to store Reaper data must be specified in the configuration YAML file.
For example:
storageType: cassandra cassandra: clusterName: &amp;quot;test&amp;quot; contactPoints: [&amp;quot;127.0.0.1&amp;quot;] keyspace: reaper_db queryOptions: consistencyLevel: LOCAL_QUORUM serialConsistencyLevel: SERIAL  If you&amp;rsquo;re using authentication or SSL:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/backends/h2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/backends/h2/</guid>
      <description>H2 Backend To use H2 as the persistent storage for Reaper, the storageType setting must be set to database in the Reaper configuration YAML file. When using H2 storage, the database will be automatically created under the path configured in the configuration YAML file. An example of how to configure H2 as persistent storage for Reaper can be found in the cassandra-reaper-h2.yaml.
storageType: database database: # H2 JDBC settings driverClass: org.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/backends/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/backends/memory/</guid>
      <description>Memory Backend To use in memory storage as the storage type for Reaper, the storageType setting must be set to memory in the Reaper configuration YAML file. Note that the in memory storage is enabled by default.
In memory storage is volatile and as such all registered cluster, column families and repair un information will be lost upon service restart. This storage setting is intended for testing purposes only.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/backends/postgres/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/backends/postgres/</guid>
      <description> Postgres Backend To use PostgreSQL as the persistent storage for Reaper, the storageType setting must be set to database in the Reaper configuration YAML file. The schema will be initialized/upgraded automatically upon startup in the configured database. Ensure that the correct JDBC credentials are specified in the cassandra-reaper.yaml to allow object creation.
storageType: database database: # PostgreSQL JDBC settings driverClass: org.postgresql.Driver user: postgres password: url: jdbc:postgresql://127.0.0.1/reaper  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/community/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/community/</guid>
      <description>We have a Mailing List and Gitter chat available.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/configuration/</guid>
      <description>Configuration An example testing configuration YAML file can be found from within this project repository: src/test/resources/cassandra-reaper.yaml
The configuration file structure is provided by Dropwizard, and help on configuring the server, database connection, or logging, can be found at:
http://www.dropwizard.io/1.1.0/docs/manual/configuration.html
Reaper Specific Configuration Settings The Reaper service specific configuration settings are:
segmentCount:
Defines the default amount of repair segments to create for newly registered Cassandra repair runs (token rings). When running a repair run by the Reaper, each segment is repaired separately by the Reaper process, until all the segments in a token ring are repaired.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/install/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/install/building/</guid>
      <description>Building Install Packages Debian packages and RPMs can be built from this project using Make, for example:
make deb make rpm  Building JARs from source The easiest way to build is to use the following make command:
make package  To build Reaper without rebuilding the UI, run the following command :
mvn clean package
To only regenerate the UI (requires npm and bower) :
mvn generate-sources -Pbuild-ui</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/install/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/install/docker/</guid>
      <description>Docker Docker and Docker Compose will need to be installed in order to use the commands in this section.
Building Reaper Packages with Docker Building Reaper packages requires quite a few dependencies, especially when making changes to the web interface code. In an effort to simplify the build process, Dockerfiles have been created that implement the build actions required to package Reaper.
To build the JAR and other packages which are then placed in the packages directory run the following commands from the top level directory:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/docs/install/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/docs/install/packages/</guid>
      <description>Downloads and Installation The current stable version is 0.6.2 :
 Deb Package RPM Tarball  The latest beta version is 0.7.0-beta-25082017 :
 Deb Package RPM Tarball  For a docker image, please see the Docker section.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/download/</guid>
      <description>Downloads and Installation The current stable version is 0.6.2 :
 Deb Package RPM Tarball  The latest beta version is 0.7.0-beta-25082017 :
 Deb Package RPM Tarball  For a docker image, please see the Docker section.
Building Packages Debian and RPM packages can be built from this project using Make, for example:
make deb make rpm  Docker A Docker build environment is also provided in the src/packaging directory to build the entire project and can be run by using Docker Compose:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/faq/</guid>
      <description>Frequently Asked Questions Why use Reaper instead of noddetool + cron? While it&amp;rsquo;s possible to set up crontab to call nodetool, it requires staggering the crons to ensure overlap is kept to a minimum. Reaper is able to intelligently schedule repairs to avoid putting too much load on the cluster, avoiding impacting performance. Reaper also offers a simple UI to schedule repairs as granularly as needed.
Do I need to do repairs if I&amp;rsquo;m not deleting data?</description>
    </item>
    
    <item>
      <title></title>
      <link>http://cassandra-reaper.io/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cassandra-reaper.io/quickstart/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>